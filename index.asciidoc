:icons: font
:toc:
:doctype: book
:sectanchors:
:idseparator: -
:data-uri:
:allow-uri-read:
:safe: unsafe
:source-highlighter: rouge

= SDLC

toc::[]

[[motivation]]
== Motivation


TBD :tada:


[[overview]]
== Overview

=== Architecture
See: https://whimsical.com/lines-2-8GKYgDts1C3ZKb3ccsrzpR

image:images/architecture.png[]

=== CI/CD flow

image:https://lucid.app/publicSegments/view/6a2266b4-6082-4c3f-b5e7-b3955359de78/image.png[]

=== Pull Request pipeline
image:https://lucid.app/publicSegments/view/31739cad-3775-43a6-acb4-9400384732ca/image.png[width=600]

=== Release
image:https://lucid.app/publicSegments/view/7af90a9b-0c46-470b-9b99-a9f151a0ddc9/image.png[width=600]

=== Stack
* https://jenkins-x.io[Jenkins X] - CORE
* https://tekton.dev[Tekton] - CI/CD
* https://kubernetes.io[Kubernetes]
* https://www.terraform.io[Terraform]
* https://www.keycloak.org[Keycloak] - OpenId provider
* https://webdriver.io[WebdriverIO] - Large test framework

== Setup Cluster & Environment Repository

[[setup]]
=== Prerequisites
* https://github.com/join[Create a git bot user] (different from your own personal user) and generate a https://github.com/settings/tokens/new?scopes=repo,read:user,read:org,user:email,write:repo_hook,delete_repo,admin:repo_hook[personal access token], this will be used by Jenkins X to interact with git repositories.
* https://learn.hashicorp.com/tutorials/terraform/install-cli#install-terraform[Terraform CLI]
* https://github.com/jenkins-x/jx-cli/releases[Jenkins X CLI]
* https://googlecontainertools.github.io/kpt/[Kpt]
* https://cloud.google.com/sdk/docs/quickstart#linux[Google Cloud SDK]
* generate Snyk https://snyk.io/blog/service-accounts/[token]
* generate Sonar cloud https://docs.sonarqube.org/latest/user-guide/user-token/[token]
* generate Slack https://api.slack.com/messaging/webhooks#getting_started[Incoming Webhooks]

=== Setup
==== 1. Create Infrastructure Repository
Open https://jenkins-x.io/docs/v3/getting-started/gke/[Jenkins X GKE] and select your cloud provider.

NOTE: Currently, only GKE + Vault been tested.

==== 2. Create Environment Repository
Open following link and generate repo based on template: https://github.com/vitech-team/jx3-gke-vault

==== 3. Prepare install script

[source,shell]
.install.sh
----
#!/usr/bin/env zsh

export INFRA_REPO_NAME="demo-infra"
export ENV_REPO_NAME="demo-environment"

export INFRA_GIT="https://github.com/vitech-team/$INFRA_REPO_NAME.git"
export ENV_GIT="https://github.com/vitech-team/$ENV_REPO_NAME.git"

export TF_VAR_jx_bot_username=XXX
export TF_VAR_jx_bot_token=XXX

export CLUSTER_NAME="demo-time"
export GCP_PROJECT="XXX"
export ZONE="europe-west1-c"
export MIN_NODE_COUNT="4"
export FORCE_DESTROY="false"

export green="\e[32m"
export nrm="\e[39m"

git clone $INFRA_GIT
git clone $ENV_GIT

cd $INFRA_REPO_NAME

rm values.auto.tfvars
cat <<EOF >> values.auto.tfvars
resource_labels = { "provider" : "jx" }
jx_git_url = "${ENV_GIT}"
gcp_project = "${GCP_PROJECT}"
cluster_name = "${CLUSTER_NAME}"
cluster_location = "${ZONE}"
force_destroy = "${FORCE_DESTROY}"
min_node_count = "${MIN_NODE_COUNT}"
EOF

git commit -a -m "fix: configure cluster repository and project"
git push

terraform init
terraform apply

echo -e "${green}Setup kubeconfig...${nrm}"
gcloud container clusters get-credentials "${CLUSTER_NAME}" --zone "${ZONE}" --project "${GCP_PROJECT}"

echo -e "For vault root token use: ${green}kubectl get secrets vault-unseal-keys  -n secret-infra -o jsonpath={.data.vault-root} | base64 --decode${nrm}"
echo "Taling logs..."
jx admin log

echo -e "${green}Okay, now we creating new key for service account...${nrm}"
gcloud iam service-accounts keys create keyfile.json --iam-account "${CLUSTER_NAME}-tekton@${GCP_PROJECT}.iam.gserviceaccount.com"
SECRETNAME=docker-registry-auth
kubectl create secret docker-registry $SECRETNAME \
  --docker-server=https://gcr.io \
  --docker-username=_json_key \
  --docker-email=sdlc@vitechteam.com \
  --docker-password="$(cat keyfile.json)" \
  --namespace=jx
kubectl label secret $SECRETNAME secret.jenkins-x.io/replica-source=true --namespace=jx

jx namespace jx
----

==== 4. Populate secrets
Fist we need start vault proxy
[source,shell]
.sec-vault-start.sh
----
jx secret vault portforward
----

===== 4.1 Auto populate secrets
[source,shell]
.sec-auto-populate.sh
----
jx secret populate
----

===== 4.2 Populate required secrets
[source,bash]
.sec-required-populate.sh
----
jx secret edit -f slack

jx secret edit -f snyk

jx secret edit -f sonar
----

NOTE: Secrets also can be populated via Vault UI see: <<runbook-vault>>
NOTE: Execute `jx secret verify` and check if all needed secrets are populated like: `sonar`, `snyk`, etc...


===== 4.3 Verify secrets
Execute `jx secret verify` and check if all needed secrets are populated like: `sonar`, `snyk`, etc...


==== 5. Create application based on SDLC quickstart
===== 5.1 Spring ?
If you need some REST API backend service use template with name: `vitech-sdlc-backend`

[source,shell]
.quick-start-backend.sh
----
YOUR_ORG_NAME="vitech-team"
jx project quickstart --pack="spring-gradle" --org="${YOUR_ORG_NAME}"
----

===== 5.2 Angular ?
If you need frontend application on Angular use: `vitech-sdlc-frontend`

[source,shell]
.quickstart-forntend.sh
----
YOUR_ORG_NAME="vitech-team"
jx project quickstart --pack="angular" --org="${YOUR_ORG_NAME}"
----

After setup you need edit default configs in `environments` folder.

* keycloak url: `kubectrl get ingress -n keycloak`
* change backend service name in `nginx.conf`

== Enable Large Tests
Currently, we have only Large Tests implementation based https://webdriver.io[WebdriverIO].
We added a few steps to `release` and `pullrequest` pipelines:

* Check if large test been executed on *Staging* before promote it on Production *environment*
* Execute *Large Tests* after changes been applied on environment like Production.

Foe enabling:

* open `.lighthouse/large-test/triggers.yaml` and change: `always_run: false`, `optional: false` to `true`.
* open `.lighthouse/jenkins-x/release.yaml` and uncomment commented tasks: ` large-test-prepare-and-check` and `large-test-execute`
** change large test image name property: `LARGE_REPORTS_IMAGE`
** change your app URLs properties: `APP_URL_STAGING`, `APP_URL_PRODUCTION`, if you have more environments just add additional property like: `APP_URL_XXX`


== Example Apps
* https://github.com/vitech-team/mood-feed-frontend[Frontend app example]
* https://github.com/vitech-team/mood-feed-backend[Backend example]
* https://github.com/vitech-team/mood-feed-test[Large test example]

== Pipelines
=== Pipelines catalog and pack
All shared tasks and packs stored in: https://github.com/vitech-team/tekton-pipelines-catalog

==== Packs
Custom packs: https://github.com/vitech-team/tekton-pipelines-catalog/tree/master/packs

==== Tasks
All tasks are in sync with https://github.com/vitech-team/tekton-pipelines-catalog[environment repository] via https://googlecontainertools.github.io/kpt/[Kpt].
For more information about tasks and pipelines check https://github.com/tektoncd/pipeline[Tekton docs]

NOTE: for more information about pipelines on JX see: https://jenkins-x.io/docs/v3/develop/pipeline-catalog/

== Configure Slack Notifications
=== Alertmanager
* In vault find `alertmanager.yaml` secret and replace `${SLACK_HOOK_URL}` with your hook URL. See example: `charts/prometheus-community/kube-prometheus-stack/secret-schema.yaml`

==== Large Test Notification
If you wanna change Large test execution message to slack

* In vault find `slack/SLACK_LARGE_TEST_FAILED_MSG`  or `slack/SLACK_LARGE_TEST_SUCCESS_MSG` and replace with your own template. See example `charts/dev/secret/secret-schema.yaml`
** You can use  next variables what can be populated automatically `${ENV}`, `${STATUS}`, `${REPORT_URL}`, `${DETAILS}` and `${GIT_SHA}`


== Runbook
[[runbook-vault]]
=== Vault

* For port forward Vault type: `jx secret vault portforward` - after that you can rich Vault at https://localhost:8200
* Vault root token can be found in secret: `vault-unseal-keys`, key: `vault-root`


