:icons: font
:toc: left
:page-layout: docs
:sectanchors:
:idseparator: -
:data-uri:
:allow-uri-read:
:safe: unsafe
:source-highlighter: rouge
:scriptsdir: scripts

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

ifdef::env-github[]
:scriptsdir: https://raw.githubusercontent.com/vitech-team/SDLC/documentation/script
:imagesdir: https://gist.githubusercontent.com/path/to/gist/revision/dir/with/all/images
endif::[]

= SDLC

toc::[]

[[overview]]
== Overview

=== Architecture
==== Simple view
++++
<iframe style="border:none" width="100%" height="450" src="https://whimsical.com/embed/DGQcqfVJMY5CuP4z2QGU1s"></iframe>
++++

==== Extended
++++
<iframe style="border:none" width="100%" height="450" src="https://whimsical.com/embed/8GKYgDts1C3ZKb3ccsrzpR"></iframe>
++++

=== CI/CD flow
++++
<iframe allowfullscreen frameborder="0" style="width: 100%; height: 550px;" src="https://lucid.app/documents/embeddedchart/88013d3c-9451-45de-b97c-87e3bf8dff8a" id="ZddTO1PVGjTd"></iframe>
++++

=== Stack
* https://jenkins-x.io[Jenkins X] - CORE
* https://tekton.dev[Tekton] - CI/CD
* https://kubernetes.io[Kubernetes]
* https://www.terraform.io[Terraform]
* https://www.keycloak.org[Keycloak] - OpenId provider
* https://webdriver.io[WebdriverIO] - Large test framework

== Setup Cluster & Environment Repository

[[setup]]
=== Prerequisites
* https://github.com/join[Create a git bot user] (different from your own personal user) and generate a https://github.com/settings/tokens/new?scopes=repo,read:user,read:org,user:email,write:repo_hook,delete_repo,admin:repo_hook[personal access token], this will be used by Jenkins X to interact with git repositories.
* https://learn.hashicorp.com/tutorials/terraform/install-cli#install-terraform[Terraform CLI]
* https://github.com/jenkins-x/jx-cli/releases[Jenkins X CLI]
* https://googlecontainertools.github.io/kpt/[Kpt]
* https://cloud.google.com/sdk/docs/quickstart#linux[Google Cloud SDK]
** https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#enable_on_cluster[Enable workload identity for k8s cluster]
* generate Sonar cloud https://docs.sonarqube.org/latest/user-guide/user-token/[token]
* generate Slack https://api.slack.com/messaging/webhooks#getting_started[Incoming Webhooks]
* generate Snyk https://snyk.io/blog/service-accounts/[token]

=== Setup
==== 1. Create Infrastructure Repository
Create infrastructure repository for GKE: https://github.com/jx3-gitops-repositories/jx3-terraform-gke/generate

==== 2. Create Environment Repository
Create environment repository: https://github.com/vitech-team/jx3-gke-vault

==== 3. Prepare install script

[source,shell]
.install.sh
----
include::{scriptsdir}/install.sh[]
----
<1> infrastructure repository name
<2> environment repository name
<3> infra. and env. repo URLs
<4> GitHub user name and token. *User should habe settings permission to all repositories*
<5> cluster name
<6> GCP project id
<7> cluster zone: https://cloud.google.com/compute/docs/regions-zones#available
<8> default node count
<9> if buckets and PVCs should be deleted in case of `terraform destroy` command
<10> store cluster configs in file. for more configs see: https://github.com/jx3-gitops-repositories/jx3-terraform-gke#terraform-inputs

==== 4. Populate secrets
===== 4.1 Create vault proxy
Fist we need start vault proxy
[source,shell]
.sec-vault-start.sh
----
include::{scriptsdir}/sec-vault-start.sh[]
----

===== 4.2 Auto populate secrets
[source,shell]
.sec-auto-populate.sh
----
include::{scriptsdir}/sec-auto-populate.sh[]
----

===== 4.3 Populate required secrets
[source,bash]
.sec-required-populate.sh
----
include::scripts/sec-required-populate.sh[]
----

NOTE: Secrets also can be populated via Vault UI see: <<runbook-vault>>

===== 4.4 Verify secrets
Execute `jx secret verify` and check if all needed secrets are populated like: `sonar`, `slack`, etc...


==== 5. Create application based on SDLC quickstart
===== 5.1 Spring ?
If you need some REST API backend service use template with name: `vitech-sdlc-backend`

[source,shell]
.quick-start-backend.sh
----
include::{scriptsdir}/quick-start-backend.sh[]
----

===== 5.2 Angular ?
If you need frontend application on Angular use: `vitech-sdlc-frontend`

[source,shell]
.quickstart-forntend.sh
----
include::{scriptsdir}/quickstart-forntend.sh[]
----

After setup you need edit default configs in `environments` folder.

* keycloak url: `kubectrl get ingress -n keycloak`
* change backend service name in `nginx.conf`

== Pipelines
=== Pipelines catalog and pack
All shared tasks and packs stored in: https://github.com/vitech-team/tekton-pipelines-catalog

==== Packs
Custom packs: https://github.com/vitech-team/tekton-pipelines-catalog/tree/master/packs

All tasks, packs and pipelines are in sync with https://github.com/vitech-team/jx3-gke-vault[environment repository] via https://googlecontainertools.github.io/kpt/[Kpt].

NOTE: more information about tasks and pipelines check https://github.com/tektoncd/pipeline[Tekton docs]

NOTE: more information about pipelines on JX see https://jenkins-x.io/docs/v3/develop/pipeline-catalog/[JX Pipeline Docs]

== Large Tests

Currently, we have only Large Tests implementation based https://webdriver.io[WebdriverIO].
We added a few steps to `release` and `pullrequest` pipelines:

* Check if large test been executed on *Staging* before promote it on Production *environment*
* Execute *Large Tests* after changes been applied on environment like Production.

=== Enable

* open `.lighthouse/large-test/triggers.yaml` and change: `always_run: false`, `optional: false` to `true`.
* open `.lighthouse/jenkins-x/release.yaml` and uncomment commented tasks: ` large-test-prepare-and-check` and `large-test-execute`
** change large test image name property: `LARGE_REPORTS_IMAGE`
** change your app URLs properties: `APP_URL_STAGING`, `APP_URL_PRODUCTION`, if you have more environments just add additional property like: `APP_URL_XXX`

=== Selenium
For selenium hub config use:

* `charts/dev/largetests/values.yaml.gotmpl`
* `charts/dev/largetests/values.yaml`

List of all configs: https://github.com/helm/charts/tree/master/stable/selenium#configuration

=== Slack notification
If you wanna change Large test execution message to slack, open and change: `charts/dev/secret/templates/slack-messages.yaml`

NOTE: You can use  next variables what can be populated/replaced: `${ENV}`, `${STATUS}`, `${REPORT_URL}`, `${DETAILS}` and `${GIT_SHA}`


== Keycloak

For Keycloak configuration use: `charts/dev/keycloak/values.yaml.gotmpl` file in env. repository list of keycloak configs: https://github.com/codecentric/helm-charts/tree/master/charts/keycloak#configuration

== Metrics
Metrics chart https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack[kube-prometheus-stack]

* For custom monitors and gradana dashboard use folder: `charts/dev/prometheusmonitors/templates`
* For metrics stack configuration use
** `charts/prometheus-community/kube-prometheus-stack/values.yaml.gotmpl`
** `charts/prometheus-community/kube-prometheus-stack/values.yaml`

=== Alertmanager
==== Configure Slack Notifications
* In vault find `alertmanager.yaml` secret and replace `${SLACK_HOOK_URL}` with your hook URL. See example: `charts/prometheus-community/kube-prometheus-stack/secret-schema.yaml`


== Example Apps
* https://github.com/vitech-team/mood-feed-frontend[Frontend app example]
* https://github.com/vitech-team/mood-feed-backend[Backend example]
* https://github.com/vitech-team/mood-feed-test[Large test example]

== Runbook

[[runbook-cluster-delte]]
=== Ð¡luster delete

* for the cluster delete `cd` to your infra. repository and execute `terraform destroy`

[[runbook-vault]]
=== Vault

* For port forward Vault type: `jx secret vault portforward` - after that you can rich Vault at https://localhost:8200
* Vault root token can be found in secret: `vault-unseal-keys`, key: `vault-root`

[[runbook-keycloak]]
=== Keycloak
* keycloak url: `kubectrl get ingress -n keycloak`

== Other
=== SDLC glossary
https://github.com/vitech-team/SDLC/wiki/SDLC

=== GitHub project
https://github.com/vitech-team/SDLC/projects

=== Diagrams

* https://lucid.app/lucidchart/invitations/accept/c7c8be31-1804-4a2c-8db6-1300d64974ee
* https://whimsical.com/sdlc-9iJvu6pNAXzUQBYYR61qAM


